import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load Data
data_path = "data/ecommerce_sales.csv"
df = pd.read_csv(data_path, parse_dates=["Transaction_Date"], index_col="Transaction_Date")

df = df.resample("M").sum()

# Exploratory Data Analysis
plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x=df.index, y="Sales_Amount")
plt.title("E-Commerce Sales Trend")
plt.show()

# Train-Test Split
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]

# ARIMA Model
arima_model = ARIMA(train["Sales_Amount"], order=(5,1,0))
arima_fit = arima_model.fit()
arima_pred = arima_fit.forecast(steps=len(test))

# XGBoost Model
X = np.arange(len(df)).reshape(-1, 1)
y = df["Sales_Amount"].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

xgb_model = XGBRegressor(objective="reg:squarederror")
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

# Evaluation
arima_mae = mean_absolute_error(test["Sales_Amount"], arima_pred)
xgb_mae = mean_absolute_error(y_test, xgb_pred)
print(f"ARIMA MAE: {arima_mae:.2f}, XGBoost MAE: {xgb_mae:.2f}")

# Visualization
plt.figure(figsize=(12, 6))
plt.plot(df.index, df["Sales_Amount"], label="Actual Sales")
plt.plot(test.index, arima_pred, label="ARIMA Forecast", linestyle="dashed")
plt.plot(test.index, xgb_pred, label="XGBoost Forecast", linestyle="dotted")
plt.legend()
plt.title("E-Commerce Sales Forecasting")
plt.show()
